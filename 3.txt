 Reference
 |
 subroutine
 |
 Regx

 ---------------------------------------------------------------------------------  
 Reference 
   |
   | -> 1. subroutine
   | -> 2. complex DS
   | -> 3. oops - object


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 programming C 					Vs		in perl script
 -----------------						---------------

 int a=10;    a | 10 | 0x1000					$a=10;		$a  | 10 |0x1000 

 int *p;      p |GB | 0x1004

 p=&a;	      p |0x1000| 0x1004					$r1=\$a;		$r |0x1000|0x1234
 -
 |->0x1000 (Address) - pointer					print $r1; -> (SCALAR)0x1000
 
 *(&a) 
 |
 |->de-reference -> 10						@b=(10,20);
 
 *p ->10							$r2=\@a;	
								
								print $r2; -->(ARRAY)0x4223

								%h=(K=>V1);

								$r3=\%h;
								print $r3; -->(HASH)0x45232


								print $$r1; ->10 (de-reference)

								$v=$$r1;

								print $v; ->10

								
								@arr=@$r2;(de-reference)
								     
								%hv=%$r3
								---

 int a=10;	a| 10 | 0x1000

 int *p;	p| GB | 0x1002				$a=10;	 $a  |  10  | 0x1000
							
 int **q;	q| GB | 0x1004				$p=\$a;	 $p  |0x1000| 0x1002
 
 p=&a;--------> p|0x1000|0x1002				$q=\$p;  $q  |0x1002| 0x1004

 q=&p; -------> q|0x1002|0x1004				ref($p) ->SCALAR
																
 print q ->0x1002					ref($q) ->REF 
      *q ->0x1000
      **q ->10                                          print $q -> REF(0x1002)
      ---									
	|						print $$q -> SCALAR(0x1000)
	pointer to pointer				print $$$q -> 10

 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 
  ref($referenceVariable) ->SCALAR/ARRAY/HASH

 @b=(10,20,30);

 $r1=\@b;

 $r2=\$r1;

 |__print $r2 ->REF(0x3445)
	  ---
	  |
	  $$r2 ->ARRAY(0x42343)
	  ----
	   |
	  @$$r2
	  |
	de-reference


   %h=(K =>V);

   $r1=\%h;
   
   $r2=\$r1;
   ---
    |->print $r2 ->REF(0x333)
	     ---
	      |
	     $$r2 ->HASH(0x313)
	     ----
		|
	    %hv=%$$r2;
-----------------------------------------------------------------------------------------------------

 subroutine
 ----------
  ->function (or) user defined function
  |
  ->Code block (or) subscript
    ..........................

  ->code reuse 

  ->definition //code block - operation block
	|
	|
    functionCall - invoke a definition

 Syntax:-
 --------
 sub subroutinename{

	Code block
 }

 subroutinename()  (or) subroutinename 

 -------------------------------------------------------------------------------------------

 write a perl script 

 function/subroutine - display list of files
 |
 function/subroutine - display current process details

 ----
 write a perl script 

  [ process ]
     |
 [ list of files ] 
     |
  [ main ]
 
 ------------------------------------------------------------------------------------------ 



 
function_name(); # Simple functionCall

function_name(arg1,arg2,arg3,arg4,arg5,arg6,....argN);
	     -----------------------------------------
			|
		functioncall - actual arguments - we can pass any type of value as a argument

 
 sub functionName{
	
	@_ <== get list of functionCall args 
	___
	print "@_\n"; ->10,1.34,"data"

 	print "$_[0]\n"; ->10
	print "$_[1]\n"; ->1.34

	print "$_[-1]\n"; ->"data"

	print "Total no.of args:",scalar(@_),"\n"; # Total no.of args:3



 }		
 functionName(10,1.34,"data"); <== functionCall with arguments
	      ===============
		|->Array


 ==================================================================================================


  Write a perl script 
  --------------------
 
  STEP 1: create an empty hash 

  STEP 2: read a network property file (format INI) - line by line
		
		- split single string into multiple values(array)
		  -----
		     |->=
		(ex: "interface=eth0" =>  ("interface","eth0") ->h["interface"]="eth0";)
		
		   {"interface" => "eth0"}
		   -----------------------
		- add data into an existing hash

 STEP 3: display key/value - details 

 STEP 4: hash - modification ->interface eth0 => eth1
			       onboot  yes    => no
			       IP 10.20.30.40 => 192.168.1.234
				
		add 	   -> DOMAIN =>example.com
			      DNS2   =>134.234.245.555
	 

 STEP 5: display updated key/value details (STEP-3)
		

 STEP 6: create a new_property file - write updated hash table content to external file
				     in same format ( key=Value //INI format)
 ----------------------------------------------------------------------------------------------
	|
   copy the above code -> newfile.pl
			  |
			each step - create a new function - operation 
					
			function call args return a value - use my variable 
  ---------------------------------------------------------------------------------------------
 
=============================================================================================================================================================
 Regx
 ----
  1. search 
  2. substitute


  =~
  !~ 
 -----//Regx operators

 /pattern/
  ------

 $inputString =~ /Regx/  ->1/undef (bool)
 ------------     ===
		    

 if($inputstring =~ /Regx/){
	
		match-action
 }		
 
 $dept="sales";

 if($dept eq "sales"){
	print "Yes - matched\n";  =>Yes-matched
 }else{
	print "Not - matched\n";
 }
 
  if($dept eq "sales,"){
	print "Yes - matched\n";
 }else{
	print "Not - matched\n";  ==> Not-matched 
 }
 	

  if($dept =~ /"sales"/){
	print "Yes - matched\n";  => Yes-matched
 }else{
	print "Not - matched\n";
 }

 

 if("list of sales emp details" =~ /sales/){
	print "Yes - matched\n"; ==============> Yes-matched 
 }else{
	print "Not - matched\n";
 }
 

 
 if("list of sales emp details" =~ /SALES/i){
	print "Yes - matched\n"; ==============> Yes-matched 
 }else{
	print "Not - matched\n";
 }
 

 ------------------------------------------------------------------------------------------------

  BasicRegx(BRE)
  --------------//single pattern search

  ^		->	^pattern  	- search the pattern line starts with 

  $		->	pattern$	- search the pattern line ends with 

  ^pattern$     -> 	^pattern$ 	- pattern only

  .		->	. - it match any single char (except \n char) 

  .*		->	.* list of all

  [  ]		->	character class - searching pattern character based 
 
  ^[  ]

  [  ]$

  [^  ]

  ^$		-	empty line

  \s - space chars
 
 
 [Aav][Rr]un
 -----------
  ARun
  Arun
  aRun
  arun
  vRun
  vrun
  -----

  [a-z] 
  [A-Z]
  [0-9]	 -> \d

  [A-Za-z]

  [A-Za-z0-9] ->\w


  [a-z]
  ------
   |->search the pattern any lowercase chars 

  ^[a-z]
  ------
   |->search the pattern line starts with any lower case char 

  [a-z]$
  ------
    |->search the pattern line ends with any lowercase chars 

  [^a-z]
  =======
     |->NOT matching any lower case chars 

  [^a-zA-Z] - Not matching any alpha

  [^a-zA-Z0-9] - Not matching any alpha and numbers  - matching chars space,specialchars

  [^a-zA-Z0-9\s]
  -----------------
	|->Not matching any alphanumeric & space - matching chars are specialchars

  
 IP
 ---
 Aix
 OL5
 At
 601
 ---

 grep [A5t] IP
     ______
	|->any where char 'A' '5' 't' is matched - OK

 Aix
 -
 OL5
   -
 At
 --

 grep ^[A5t] IP		Vs		grep [^A5t] IP

 Aix					Aix
 -                                       --
 At					OL5
 -                                      --
					601
					---
 

 ^[A-Z][a-z].*[0-9]$
  
 Fa112342SD 23423@#@#$ sasasaf7 //matched
 ||---------------------------|

 ps -e|grep d$

 ps -e|grep [dsh0-9]$
	    
 ....sshd
	-
 ....bash
	-
 ....netns
	 -
 ....apache2
	   -

------------------------------------------------------------------------------------------------------
 Extended Regx(ERE)
 --------------------
	|
	search more than one pattern 
	       ---------------------

  |	=>	pattern1|pattern2|pattern3|...|patternN  //anyone pattern is matched ->OK
  

 m/^[a-zA-Z].*[a-z]$/  ==>(1)
 
 m/\s$/ =>(2)
 
 ## (or)  ##
 
 if($_ =~ /^[a-zA-Z].*[a-z]$/){

 }
					=>	if($_ =~ /^[a-zA-Z].*[a-z]$|\s$/){
 if($_ =~ /\s$/){						...
	..					}
 }

 ()	=> (pattern1)(pattern2)
	   .................... //both pattern should match in same order - like logical and operator &&
		

	$var="programming java and python languages";

	if($var =~ /(java)(python)/){
		     ----  ------
		print "OK";
	}else{
		print "Not-Matched";	=>Not-Matched 
	}		
	
 -------------------------------------------------------------------------------------------------
  +  - 1 or more
 

  <Pattern>+
  ---------

   ab+c 
    -
    |-> minimum 1 times maximum more (nolimit)
   
   abc abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc //matched 


   ^[A-Z][0-9]+[a-z][a-z]$
	 ------
	   |->  starts with any single uppercase chars followed by 1 or more digits ends with 
		any two lowercase chars.

  F3gh
  A332232342342342342342342445675898679789786kl
  -----------------------------------------------//matched 

  \s+
  ====
   |-> 1 or more space 	
 	
 -----------------------------------------------------------------------------------------------------

 {} - IRE
 --

 <Pattern>{n}  - <Pattern> repeated 'n' times.

 ab{2}c =>  abbc //matched		abc abbbbbbbbbbc abcbc //not-matched 
  ----

 ^[A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][0-9][a-z][a-z]$ <== //BRE same as ^[A-Z]{3}[0-9]{5}[a-z]{2}$ <== //ERE

 <Pattern>{n,} - <Pattern> repeated minimum 'n' times maximum nolimit 

 ab{2,}c => abbc abbbc abbbbc abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc //matched 

	    abc //not-matched

 ab+c ---same as -- ab{1,}c 
  --

 commandResult| ^\s{3,}[0-9]{2}
  		--====
 
  <Pattern>{n,m} - <Pattern> repeated minimum 'n' times maximum 'm' times
  ---------

  ab{2,4}c ==> abbc abbbc abbbbc
	       --------------------//matched

		abc abbbbbc //not-matched 

 ^[A-Za-z]{2,5}[0-9]{3,8}$
  -----------------------

------------------------------------------------------------------------------------------------------

 input validation
 -------------------

 print "Enter any two digits:";		->Enter any two digits:5	Enter any two digits:123
				
 chomp($n=<>);

 print "n value is:$n\n";		 n value is:5		n value is:123

 Enter any two digits:Hello

 n value is: Hello

 
 ^[0-9]{2}$   (or) ^\d{2}$   (or) ^\d\d$  (or) ^[0-9][0-9]$

 print "Enter any two digits:";
 
 chomp($n=<>);

 if($n =~ /^[0-9]{2}$/){
		print "n value is:$n\n";
 }else{
		print "Sorry invalid format\n";
 }
 
-----------------------------------------------------------------------------------------------------

 $input_string =~ s/oldpattern/replacement/;


 $var="101,raj,sales,pune,1000\n";


 $var =~ s/sales/prod/;

 print($var) -> 101,raj,prod,pune,1000
		--------====----------


 
 $var="101,raj,sales,pune,1000\n";

 $var =~ s/HR/prod/;

 print($var) -> 101,raj,sales,pune,1000
		--------====----------
 
-----------------------------------------------------------------------------------------------------